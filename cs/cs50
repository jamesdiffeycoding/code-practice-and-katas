# Checklist

Completed lectures: 0

# Lecture 0: Intro to CS / "Scratch"

- Get comfortable with the _firehose of learning_.
- Computers use _transistors_ to store data (ON / OFF, 1 / 0).
- _Machine code_ is in binary, what people write is _source code_.
- Source code must be compiled down to machine code for the computer to read.
- _ASCII and UNICODE_ (superset of ASCII with more bits and symbols) are conventions for which letters and symbols correspond to which binary numbers (e.g. 33 = "1")
- With different notation forms (unary - 1, 11, 111; binary: 0, 1, 01; decimal: 1, 2, 3)
- With different notation forms we can use different _place values_ (e.g. base 1, 2 etc)
- '_Bits_' are binary digits. Bytes are a sequence of 8-bits which can count up to (2^8 = 255).
- With 32 bits you can coutn to 2^32 = 2 billion.
- Computers may record numbers with _inaccuracies_ due to limited storage capacity. Decimals and negative numbers drastically reduce the magnitude of numbers that can be represented accurately with a certain number of bytes.
- _Integer overflow_ occurs when a number escapes the range of numbers that can be represented accurately by a certain amount of memory. It can sometimes cause problems for programs developed with the assumption that a number would always fall within the range (e.g. if a video game reaches a level greater than 255 or if a clock reaches a time beyond the count). In a Boeing example, the planes must be turned off and on again to reset their memory after a certain amount of time.
- Colours, sounds and other kinds of media can also be represented with bits in various ways. Numbers may be used to represent RGB values for photos or notes and durations in a song.
- _Algorithms_ are step by step solutions to solve a problem. They can help us get from an input to a desired output. _Pseudocode_ is the word-based form of an algorithm.
- Some algorithms are more efficient than others (e.g. each-page search algorithms through a phone book vs the book-halving method).
- _Code quality_ can be measured by accuracy, efficiency, lack of repetition (DRY), security (eg no _magic numbers_) and organisation.
- _Conditions_ such as _boolean expressions_ or _loops_ are used for _control flow management_. Loops may be while loops, do while loops, or for loops.
- _Control-flow diagrams_ can be useful for understanding desired program logic.
- _Chatbots_ are not created with if else statements, they are built with large language models that can infer how people might respond based on all the data inputted to them.
- _Chatbots_ are dangerous for learning if they hand you answers. You need to prioritise your own learning. _Rubber ducks_ can also be fantastic verbalisation tools for your learning.
- Focus on the _intellectual problems_, not just syntax.
- _Scratch_ is a good tool for learning basic programming concepts such as: functions, triggers, objects, variables, loops, arguments, randomisation.
- _Periodisation_ is critical for code projects. You must break your goals into smaller achievable goals. You shouldn't aim for perfection from the start.

# Lecture 1: C

- _Libaries_ are collections of other people's code that you may want to use in your own projects. They can also be called _header files_.
- _Compilers_ convert source code to machine code.
- _GUIs_ are graphical user interfaces.
- _CLIs_ are command-line interfaces and can be very efficient when learned.
  - _code filename_ makes a new file
  - _make filename_ runs a compiler on the file
  - _./filename_ runs the file
- _main functions_ are the functions that run when a code program is opened.
- _Error messages_ typically have non-zero codes, where zero indicates success. A lack of error codes is often a good thing.
- "/n" escapes a line when printing.
- In C, functions must have their return value data type stated as well as their arguments (e.g. int main (void)). The main function returns an int behind-the-scenes to say whether the function ran correctly.
- In C, a _function prototype_ is needed if a function is invoked before it is defined.
- _Online documentation_ is there to help others understand code that has been written and designed by others.
- Newer languages often have easy-to-use additions that older languages don't (e.g. asking for user input is easier in Python than C).
- In C, _placeholders_ are needed (e.g. %s or %int) for subsituting in variable values.
- _Scope_ refers to the context in which a variable is available.
- _Spacing_ makes code readable.
- _Assignment operator_ is used to assign the value of a variable (=).
- _Comparison operators_ are used for comparing values (e.g. ==, ===, >=)
- _Shorthand notation_ can be useful (e.g. += 1, ++, --, ../../).
- _Logical OR and AND_ are useful for making control flow cleaner.
- _Command line arguments_ are passed to the main function of a file you run.
- _Linux_ is a popular OS for making servers. It is known for its CLI.
  = _Useful CL Commands_ include cd, cp, ls, mkdir, mv, rm, and rmdir. The TAB key also tries to autocomplete words for you.
- _Constants_ are useful to prevent accidents changing important values. In C, this is written for example (const int i = 5).
- _Comments_ are great ways to explain to colleagues what oode does, but don't overdo it.
- In C there are different data types for different numbers using different numbers of bits and providing different levels of accuracy.
- _Type casting_ is where you change the type of a variable. It allows you to perform operations on different data types (e.g. adding a float to an int).
- _Truncation_ can cause rounding errors (e.g. 3.7 becomes 3 not 4). It can create problems mathematically if data types are not specified correctly or decimals are too precise relative to the number of bits used to represent the number in memory.
- _Floating point imprecision_ refers to the inability of computers to represent infinite decimals perfectly due to memory limitations. If you print 1 / 3 it will round to the closest available number it can represent in bits which may for example be something like 0.3333333407, rather than 0.3 recurring.
