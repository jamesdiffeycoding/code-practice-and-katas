# Checklist

Completed lectures: 0

# Lecture 0: Intro to CS / "Scratch"

- Get comfortable with the _firehose of learning_.
- Computers use _transistors_ to store data (ON / OFF, 1 / 0).
- _Machine code_ is in binary, what people write is _source code_.
- Source code must be compiled down to machine code for the computer to read.
- _ASCII and UNICODE_ (superset of ASCII with more bits and symbols) are conventions for which letters and symbols correspond to which binary numbers (e.g. 33 = "1")
- With different notation forms (unary - 1, 11, 111; binary: 0, 1, 01; decimal: 1, 2, 3)
- With different notation forms we can use different _place values_ (e.g. base 1, 2 etc)
- '_Bits_' are binary digits. Bytes are a sequence of 8-bits which can count up to (2^8 = 255).
- Computers may record numbers with _inaccuracies_ due to limited storage capacity. Decimals and negative numbers drastically reduce the magnitude of numbers that can be represented accurately with a certain number of bytes.
- _Integer overflow_ occurs when a number escapes the range of numbers that can be represented accurately by a certain amount of memory. It can sometimes cause problems for programs developed with the assumption that a number would always fall within the range (e.g. if a video game reaches a level greater than 255).
- Colours, sounds and other kinds of media can also be represented with bits in various ways. Numbers may be used to represent RGB values for photos or notes and durations in a song.
- _Algorithms_ are step by step solutions to solve a problem. They can help us get from an input to a desired output. _Pseudocode_ is the word-based form of an algorithm.
- Some algorithms are more efficient than others (e.g. each-page search algorithms through a phone book vs the book-halving method).
- _Code quality_ can be measured by accuracy, efficiency, lack of repetition, security (eg no _magic numbers_) and organisation.
- _Conditions_ such as _boolean expressions_ or _loops_ are used for _control flow management_. Loops may be while loops, do while loops, or for loops.
- _Chatbots_ are not created with if else statements, they are built with large language models that can infer how people might respond based on all the data inputted to them.
- _Chatbots_ are dangerous for learning if they hand you answers. You need to prioritise your own learning. _Rubber ducks_ can also be fantastic verbalisation tools for your learning.
- Focus on the _intellectual problems_, not just syntax.
- _Scratch_ is a good tool for learning basic programming concepts such as: functions, triggers, objects, variables, loops, arguments, randomisation.
- _Periodisation_ is critical for code projects. You must break your goals into smaller achievable goals. You shouldn't aim for perfection from the start.

# Lecture 1: C

-
